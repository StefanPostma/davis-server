{"version":3,"sources":["app/configuration/configuration-base/configuration-base.component.ts"],"names":["core_1","require","router_1","config_service_1","davis_service_1","_","ConfigurationBaseComponent","router","iConfig","iDavis","this","showConfigureButton","prototype","ngOnInit","_this","sessionStorage","getItem","removeItem","titleGlobal","config","success","error","helpLinkText","getDavisUser","then","result","values","user","name","first","last","original","cloneDeep","message","catch","err","includes","logOut","getDynatrace","dynatrace","getSlack","slack","enabled","__decorate","Component","moduleId","module","id","selector","templateUrl","Router","ConfigService","DavisService","exports"],"mappings":"sgBAUAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,mBACAE,iBAAAF,QAAA,sCACAG,gBAAAH,QAAA,8BACAI,EAAAJ,QAAA,UAWaK,2BAA0B,WAOrC,QAAAA,GAAmBC,EAAuBC,EAA+BC,GAAtDC,KAAAH,OAAAA,EAAuBG,KAAAF,QAAAA,EAA+BE,KAAAD,OAAAA,EALzEC,KAAAC,qBAA+B,EAmFjC,MAzEEL,GAAAM,UAAAC,SAAA,WAAA,GAAAC,GAAAJ,IACMK,gBAAeC,QAAQ,oBACzBD,eAAeE,WAAW,mBAC1BP,KAAKD,OAAOS,YAAc,0CAC1BR,KAAKC,qBAAsB,GAE3BD,KAAKD,OAAOS,YAAc,kBAG5BR,KAAKD,OAAOU,OAAa,KAAEC,QAAU,KACrCV,KAAKD,OAAOU,OAAa,KAAEE,MAAQ,KACnCX,KAAKD,OAAOU,OAAkB,UAAEC,QAAU,KAC1CV,KAAKD,OAAOU,OAAkB,UAAEE,MAAQ,KACxCX,KAAKD,OAAOU,OAAc,MAAEC,QAAU,KACtCV,KAAKD,OAAOU,OAAc,MAAEE,MAAQ,KAEpCX,KAAKD,OAAOa,aAAe,0BAE3BZ,KAAKD,OAAOc,eACTC,KAAK,SAAAC,GACAA,EAAOL,SACTN,EAAKL,OAAOiB,OAAOC,KAAOF,EAAOE,KAC5BF,EAAOE,KAAKC,MAGVH,EAAOE,KAAKC,KAAKC,QAAOf,EAAKL,OAAOiB,OAAOC,KAAKC,KAAKC,MAAQ,IAC7DJ,EAAOE,KAAKC,KAAKE,OAAMhB,EAAKL,OAAOiB,OAAOC,KAAKC,KAAKE,KAAO,KAHhEhB,EAAKL,OAAOiB,OAAOC,KAAKC,MAAQC,MAAM,GAAGC,KAAK,IAKhDhB,EAAKL,OAAOiB,OAAOK,SAASJ,KAAOtB,EAAE2B,UAAUlB,EAAKL,OAAOiB,OAAOC,OAElEb,EAAKL,OAAOU,OAAa,KAAEE,MAAQI,EAAOQ,UAG7CC,MAAM,SAAAC,GACLrB,EAAKL,OAAOU,OAAa,KAAEE,MAAQc,EAAIF,QACnCE,EAAIC,SAAS,kBACftB,EAAKL,OAAO4B,WAIlB3B,KAAKD,OAAO6B,eACTd,KAAK,SAAAC,GACAA,EAAOL,SACTN,EAAKL,OAAOiB,OAAOa,UAAYd,EAAOc,UACtCzB,EAAKL,OAAOiB,OAAOK,SAASQ,UAAYlC,EAAE2B,UAAUlB,EAAKL,OAAOiB,OAAOa,YAEvEzB,EAAKL,OAAOU,OAAkB,UAAEE,MAAQI,EAAOQ,UAGlDC,MAAM,SAAAC,GACLrB,EAAKL,OAAOU,OAAkB,UAAEE,MAAQc,EAAIF,QACxCE,EAAIC,SAAS,kBACftB,EAAKL,OAAO4B,WAIlB3B,KAAKD,OAAO+B,WACThB,KAAK,SAAAC,GACAA,EAAOL,SACTN,EAAKL,OAAOiB,OAAOe,MAAQhB,EAAOgB,MAClC3B,EAAKL,OAAOiB,OAAOe,MAAMC,SAAU,EACnC5B,EAAKL,OAAOiB,OAAOK,SAASU,MAAQpC,EAAE2B,UAAUlB,EAAKL,OAAOiB,OAAOe,QAEnE3B,EAAKL,OAAOU,OAAc,MAAEE,MAAQI,EAAOQ,UAG9CC,MAAM,SAAAC,GACLrB,EAAKL,OAAOU,OAAc,MAAEE,MAAQc,EAAIF,QACpCE,EAAIC,SAAS,kBACftB,EAAKL,OAAO4B,YAItB/B,IArFaA,4BAA0BqC,YANtC3C,OAAA4C,WACCC,SAAaC,OAAOC,GACpBC,SAAa,qBACbC,YAAa,wEAUc/C,SAAAgD,OAAwB/C,iBAAAgD,cAA8B/C,gBAAAgD,gBAPtE9C,4BAAA+C,QAAA/C,2BAAAA","file":"../../../../app/configuration/configuration-base/configuration-base.component.js","sourcesContent":["// ============================================================================\n// Config Base - Component\n//\n// This component creates Configuration landing page\n// ============================================================================\n\n// ----------------------------------------------------------------------------\n// Imports\n// ----------------------------------------------------------------------------\n// Angular\nimport { Component } from '@angular/core';\nimport { Router }    from '@angular/router';\nimport { ConfigService } from '../../shared/config/config.service';\nimport { DavisService } from '../../shared/davis.service';\nimport * as _ from \"lodash\";\n\n// ----------------------------------------------------------------------------\n// Class\n// ----------------------------------------------------------------------------\n@Component({\n  moduleId:    module.id,\n  selector:    'configuration-base',\n  templateUrl: './configuration-base.component.html',\n})\n\nexport class ConfigurationBaseComponent  {\n  \n  showConfigureButton: boolean = false;\n  \n  // ------------------------------------------------------\n  // Inject services\n  // ------------------------------------------------------\n  constructor(public router: Router, public iConfig: ConfigService, public iDavis: DavisService) { }\n\n  // ------------------------------------------------------\n  // Initialize component\n  // ------------------------------------------------------\n  ngOnInit() {\n    if (sessionStorage.getItem('wizard-finished')) {\n      sessionStorage.removeItem('wizard-finished');\n      this.iDavis.titleGlobal = 'Great! It looks like we\\'re all set now.';\n      this.showConfigureButton = true;\n    } else {\n      this.iDavis.titleGlobal = 'Configure Davis';\n    }\n    \n    this.iDavis.config['user'].success = null;\n    this.iDavis.config['user'].error = null;\n    this.iDavis.config['dynatrace'].success = null;\n    this.iDavis.config['dynatrace'].error = null;\n    this.iDavis.config['slack'].success = null;\n    this.iDavis.config['slack'].error = null;\n  \n    this.iDavis.helpLinkText = 'Help for these settings';  \n  \n    this.iDavis.getDavisUser()\n      .then(result => {\n        if (result.success) {\n          this.iDavis.values.user = result.user;\n          if (!result.user.name) {\n            this.iDavis.values.user.name = {first:'',last:''};\n          } else {\n            if (!result.user.name.first) this.iDavis.values.user.name.first = '';\n            if (!result.user.name.last) this.iDavis.values.user.name.last = '';\n          }\n          this.iDavis.values.original.user = _.cloneDeep(this.iDavis.values.user);\n        } else {\n          this.iDavis.config['user'].error = result.message;\n        }\n      })\n      .catch(err => {\n        this.iDavis.config['user'].error = err.message;\n        if (err.includes('invalid token')) {\n          this.iDavis.logOut();\n        }\n      });\n      \n    this.iDavis.getDynatrace()\n      .then(result => {\n        if (result.success) {\n          this.iDavis.values.dynatrace = result.dynatrace;\n          this.iDavis.values.original.dynatrace = _.cloneDeep(this.iDavis.values.dynatrace);\n        } else {\n          this.iDavis.config['dynatrace'].error = result.message;\n        }\n      })\n      .catch(err => {\n        this.iDavis.config['dynatrace'].error = err.message;\n        if (err.includes('invalid token')) {\n          this.iDavis.logOut();\n        }\n      });\n      \n    this.iDavis.getSlack()\n      .then(result => {\n        if (result.success) {\n          this.iDavis.values.slack = result.slack;\n          this.iDavis.values.slack.enabled = true;\n          this.iDavis.values.original.slack = _.cloneDeep(this.iDavis.values.slack);\n        } else {\n          this.iDavis.config['slack'].error = result.message;\n        }\n      })\n      .catch(err => {\n        this.iDavis.config['slack'].error = err.message;\n        if (err.includes('invalid token')) {\n          this.iDavis.logOut();\n        }\n      });\n  }\n}\n"]}