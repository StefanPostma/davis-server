{"version":3,"sources":["app/shared/config/config-user/config-user.component.ts"],"names":["core_1","require","config_service_1","davis_service_1","_","ConfigUserComponent","iDavis","iConfig","this","submitted","submitButton","submitButtonDefault","isPasswordFocused","isPasswordMasked","isSelectOpened","isDirty","prototype","doSubmit","_this","user","isWizard","isMyUser","values","otherUser","isNewUser","updateDavisUser","then","result","success","original","cloneDeep","config","error","message","addDavisUser","email","password","timezone","alexa_ids","name","first","last","admin","getTimezone","removeDavisUser","authenticate","res","getJwtToken","response","token","SelectView","sessionStorage","setItem","validate","isEqual","onTimezoneChange","tz","ngOnInit","getTimezones","timezones","catch","err","includes","logOut","setTimeout","document","getElementsByName","focus","__decorate","Input","Component","moduleId","module","id","selector","templateUrl","DavisService","ConfigService","exports"],"mappings":"sgBAAAA,OAAAC,QAAA,iBAGAC,iBAAAD,QAAA,qBACAE,gBAAAF,QAAA,uBACAG,EAAAH,QAAA,UAOaI,oBAAmB,WAc5B,QAAAA,GACSC,EACAC,GADAC,KAAAF,OAAAA,EACAE,KAAAD,QAAAA,EAXTC,KAAAC,WAAqB,EACrBD,KAAAE,aAAwBF,KAAKF,OAAe,SAAI,WAAa,OAC7DE,KAAAG,oBAA+BH,KAAKF,OAAe,SAAI,WAAa,OACpEE,KAAAI,mBAA6B,EAC7BJ,KAAAK,kBAA4B,EAC5BL,KAAAM,gBAA0B,EAC1BN,KAAAO,SAAmB,EAwJvB,MAjJIV,GAAAW,UAAAC,SAAA,WAAA,GAAAC,GAAAV,IACEA,MAAKC,WAAY,EACjBD,KAAKE,aAAe,YACpBF,KAAKW,KAASX,KAAKF,OAAOc,UAAaZ,KAAKa,SAA2Cb,KAAKF,OAAOgB,OAAOH,KAAlDX,KAAKF,OAAOgB,OAAOC,WAErEf,KAAKF,OAAOc,WAAaZ,KAAKgB,YAAgBhB,KAAKF,OAAOc,UAAYZ,KAAKa,SAC/Eb,KAAKF,OAAOmB,gBAAgBjB,KAAKW,MAC9BO,KAAK,SAAAC,GACEA,EAAOC,SACTV,EAAKZ,OAAOgB,OAAOO,SAASV,KAAOf,EAAE0B,UAAUZ,EAAKC,MACpDD,EAAKH,SAAU,EACfG,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKR,aAAe,SAEpBQ,EAAKR,aAAe,OACpBQ,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQL,EAAOM,UAG9C,SAAAD,GACEd,EAAKR,aAAe,OACpBQ,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQ,+CAGzCxB,KAAKF,OAAO4B,aAAa1B,KAAKW,MAC3BO,KAAK,SAAAC,GACEA,EAAOC,SACTV,EAAKR,aAAeQ,EAAKP,oBACzBO,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQ,KACnCd,EAAKZ,OAAOgB,OAAOC,WACjBY,MAAO,KACPC,SAAU,KACVC,SAAU,KACVC,UAAW,KACXC,MACIC,MAAO,KACPC,KAAM,MAEVC,OAAO,GAETxB,EAAKZ,OAAOgB,OAAOC,UAAUc,SAAWnB,EAAKZ,OAAOqC,cACpDzB,EAAKZ,OAAOgB,OAAOO,SAASN,UAAYnB,EAAE0B,UAAUZ,EAAKZ,OAAOgB,OAAOC,WACnEL,EAAKZ,OAAOc,UACdF,EAAKZ,OAAOgB,OAAOO,SAASV,KAAOf,EAAE0B,UAAUZ,EAAKC,MACpDD,EAAKH,SAAU,EACfG,EAAKZ,OAAOsC,gBAAgB1B,EAAKZ,OAAOgB,OAAOuB,aAAaV,OACzDT,KAAK,SAAAoB,GACEA,EAAIlB,SACNV,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EAGnCV,EAAKZ,OAAOgB,OAAOuB,aAAaV,MAAQjB,EAAKZ,OAAOgB,OAAOH,KAAKgB,MAChEjB,EAAKZ,OAAOgB,OAAOuB,aAAaT,SAAWlB,EAAKZ,OAAOgB,OAAOH,KAAKiB,SAEnElB,EAAKZ,OAAOyC,cACTrB,KACC,SAAAsB,GACE9B,EAAKZ,OAAO2C,MAAQD,EAASC,MAC7B/B,EAAKX,QAAQ2C,WAAW,SACxBhC,EAAKR,aAAeQ,EAAKP,oBACzBwC,eAAeC,QAAQ,QAASlC,EAAKZ,OAAOgB,OAAOH,KAAKgB,OACxDgB,eAAeC,QAAQ,QAASJ,EAASC,OACzCE,eAAeC,QAAQ,UAAWJ,EAASN,QAE7C,SAAAV,GACEd,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQ,6CACnCd,EAAKR,aAAeQ,EAAKP,wBAKjCO,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQc,EAAIb,QACvCf,EAAKR,aAAeQ,EAAKP,sBAG/B,SAAAqB,GACEd,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQ,6CACnCd,EAAKR,aAAeQ,EAAKP,uBAG5BO,EAAKZ,OAAOgB,OAAOO,SAASN,UAAYnB,EAAE0B,UAAUZ,EAAKC,QAG5DD,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQL,EAAOM,QAC1Cf,EAAKZ,OAAOgB,OAAOH,KAAKgB,MAAQ,GAChCjB,EAAKZ,OAAOgB,OAAOH,KAAKiB,SAAW,GACnClB,EAAKR,aAAeQ,EAAKP,sBAG7B,SAAAqB,GACEd,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQ,6CACnCd,EAAKR,aAAeQ,EAAKP,uBAKnCN,EAAAW,UAAAqC,SAAA,WACE7C,KAAKO,QAAWP,KAAa,UAAKJ,EAAEkD,QAAQ9C,KAAKF,OAAOgB,OAAOH,KAAMX,KAAKF,OAAOgB,OAAOO,SAASV,OAASf,EAAEkD,QAAQ9C,KAAKF,OAAOgB,OAAOC,UAAWf,KAAKF,OAAOgB,OAAOO,SAASN,YAGhLlB,EAAAW,UAAAuC,iBAAA,SAAiBC,GACXhD,KAAKa,SACNb,KAAKF,OAAOgB,OAAOH,KAAKkB,SAAWmB,EAEnChD,KAAKF,OAAOgB,OAAOC,UAAUc,SAAWmB,GAI7CnD,EAAAW,UAAAyC,SAAA,WAAA,GAAAvC,GAAAV,IACMA,MAAKgB,YACPhB,KAAKG,oBAAsB,YAE7BH,KAAKF,OAAOoD,eACThC,KACC,SAAAsB,GACE9B,EAAKZ,OAAOqD,UAAYX,EAASW,UAC7BzC,EAAKZ,OAAOc,SACdF,EAAKZ,OAAOgB,OAAOH,KAAKkB,SAAWnB,EAAKZ,OAAOqC,cACtCzB,EAAKM,YACdN,EAAKZ,OAAOgB,OAAOC,UAAUc,SAAWnB,EAAKZ,OAAOqC,gBAGxD,SAAAX,GACEd,EAAKZ,OAAOyB,OAAa,KAAEH,SAAU,EACrCV,EAAKZ,OAAOyB,OAAa,KAAEC,MAAQ,qDAEpC4B,MAAM,SAAAC,GACDA,EAAIC,SAAS,kBACf5C,EAAKZ,OAAOyD,WAGpBC,WAAW,WACLC,SAASC,kBAAkB,SAAS,IACtCD,SAASC,kBAAkB,SAAS,GAAGC,QAEzCjD,EAAKmC,YACJ,MAEThD,IAjKa+D,aAARpE,OAAAqE,4FACQD,YAARpE,OAAAqE,6FAHQhE,oBAAmB+D,YAL/BpE,OAAAsE,WACGC,SAAUC,OAAOC,GACjBC,SAAU,cACVC,YAAa,iEAiBIxE,gBAAAyE,aACC1E,iBAAA2E,iBAhBTxE,qBAAAyE,QAAAzE,oBAAAA","file":"../../../../../app/shared/config/config-user/config-user.component.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\n\n// Services\nimport { ConfigService } from '../config.service';\nimport { DavisService } from '../../davis.service';\nimport * as _ from \"lodash\";\n\n@Component({\n    moduleId: module.id,\n    selector: 'config-user',\n    templateUrl: './config-user.component.html',\n})\nexport class ConfigUserComponent implements OnInit {\n  \n    @Input() isMyUser: boolean;\n    @Input() isNewUser: boolean;\n    \n    submitted: boolean = false;\n    submitButton: string = (this.iDavis.isWizard) ? 'Continue' : 'Save';\n    submitButtonDefault: string = (this.iDavis.isWizard) ? 'Continue' : 'Save';\n    isPasswordFocused: boolean = false;\n    isPasswordMasked: boolean = true;\n    isSelectOpened: boolean = false;\n    isDirty: boolean = false;\n    user: any;\n    \n    constructor(\n      public iDavis: DavisService,\n      public iConfig: ConfigService) {}\n    \n    doSubmit() {\n      this.submitted = true;\n      this.submitButton = 'Saving...';\n      this.user = (!this.iDavis.isWizard && !this.isMyUser) ? this.iDavis.values.otherUser : this.iDavis.values.user;\n      \n      if ((!this.iDavis.isWizard && !this.isNewUser) || (!this.iDavis.isWizard && this.isMyUser)) {\n        this.iDavis.updateDavisUser(this.user)\n          .then(result => {\n              if (result.success) {\n                this.iDavis.values.original.user = _.cloneDeep(this.user);\n                this.isDirty = false;\n                this.iDavis.config['user'].success = true;\n                this.submitButton = 'Save';\n              } else {\n                this.submitButton = 'Save';\n                this.iDavis.config['user'].success = false;\n                this.iDavis.config['user'].error = result.message;\n              }\n            },    \n            error => {\n              this.submitButton = 'Save';\n              this.iDavis.config['user'].success = false;\n              this.iDavis.config['user'].error = 'Sorry an error occurred, please try again.';\n            });\n      } else {\n        this.iDavis.addDavisUser(this.user)\n          .then(result => {\n              if (result.success) {\n                this.submitButton = this.submitButtonDefault;\n                this.iDavis.config['user'].success = true;\n                this.iDavis.config['user'].error = null;\n                this.iDavis.values.otherUser = {\n                  email: null,\n                  password: null,\n                  timezone: null,\n                  alexa_ids: null,\n                  name: {\n                      first: null,\n                      last: null\n                  },\n                  admin: false\n                };\n                this.iDavis.values.otherUser.timezone = this.iDavis.getTimezone();\n                this.iDavis.values.original.otherUser = _.cloneDeep(this.iDavis.values.otherUser);\n                if (this.iDavis.isWizard) {\n                  this.iDavis.values.original.user = _.cloneDeep(this.user);\n                  this.isDirty = false;\n                  this.iDavis.removeDavisUser(this.iDavis.values.authenticate.email)\n                    .then(res => {\n                        if (res.success) {\n                          this.iDavis.config['user'].success = true;\n                        \n                            // Authenticate new user, update token\n                            this.iDavis.values.authenticate.email = this.iDavis.values.user.email;\n                            this.iDavis.values.authenticate.password = this.iDavis.values.user.password;\n                            \n                            this.iDavis.getJwtToken()\n                              .then( \n                                response => {\n                                  this.iDavis.token = response.token;\n                                  this.iConfig.SelectView('alexa');\n                                  this.submitButton = this.submitButtonDefault;\n                                  sessionStorage.setItem('email', this.iDavis.values.user.email);\n                                  sessionStorage.setItem('token', response.token);\n                                  sessionStorage.setItem('isAdmin', response.admin);\n                                },\n                                error => {\n                                  this.iDavis.config['user'].success = false;\n                                  this.iDavis.config['user'].error = 'Sorry an error occurred, please try again.';\n                                  this.submitButton = this.submitButtonDefault;\n                                }\n                              );\n                      \n                        } else {\n                          this.iDavis.config['user'].success = false;\n                          this.iDavis.config['user'].error = res.message;\n                          this.submitButton = this.submitButtonDefault;\n                        }\n                    },\n                    error => {\n                      this.iDavis.config['user'].success = false;\n                      this.iDavis.config['user'].error = 'Sorry an error occurred, please try again.';\n                      this.submitButton = this.submitButtonDefault;\n                    });\n                } else {\n                   this.iDavis.values.original.otherUser = _.cloneDeep(this.user);\n                }\n              } else {\n                this.iDavis.config['user'].success = false;\n                this.iDavis.config['user'].error = result.message;\n                this.iDavis.values.user.email = '';\n                this.iDavis.values.user.password = '';\n                this.submitButton = this.submitButtonDefault;\n              }\n            },\n            error => {\n              this.iDavis.config['user'].success = false;\n              this.iDavis.config['user'].error = 'Sorry an error occurred, please try again.';\n              this.submitButton = this.submitButtonDefault;\n            });\n      }\n    }\n    \n    validate() {\n      this.isDirty = (this.isMyUser) ? !_.isEqual(this.iDavis.values.user, this.iDavis.values.original.user) : !_.isEqual(this.iDavis.values.otherUser, this.iDavis.values.original.otherUser);\n    }\n    \n    onTimezoneChange(tz: string) {\n      if (this.isMyUser) {\n         this.iDavis.values.user.timezone = tz;\n      } else {\n         this.iDavis.values.otherUser.timezone = tz;\n      }\n    }\n    \n    ngOnInit() {\n      if (this.isNewUser) {\n        this.submitButtonDefault = 'Add User';\n      }\n      this.iDavis.getTimezones()\n        .then( \n          response => {\n            this.iDavis.timezones = response.timezones;\n            if (this.iDavis.isWizard) {\n              this.iDavis.values.user.timezone = this.iDavis.getTimezone();\n            } else if (this.isNewUser){\n              this.iDavis.values.otherUser.timezone = this.iDavis.getTimezone();\n            }\n          },\n          error => {\n            this.iDavis.config['user'].success = false;\n            this.iDavis.config['user'].error = 'Unable to get timezones, please try again later.';\n          })\n          .catch(err => {\n            if (err.includes('invalid token')) {\n              this.iDavis.logOut();\n            }\n          });\n      setTimeout(() => {\n        if (document.getElementsByName('first')[0]) {\n          document.getElementsByName('first')[0].focus();\n        }\n        this.validate();\n      }, 200);\n    }\n}"]}