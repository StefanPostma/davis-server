{"version":3,"sources":["app/shared/config/config-users/config-users.component.ts"],"names":["core_1","require","router_1","davis_service_1","_","ConfigUsersComponent","iDavis","router","this","submitted","submitButton","isPasswordFocused","isPasswordMasked","addUser","editUser","users","backImg","backImgHover","filterName","prototype","addMode","values","otherUser","email","password","timezone","alexa_ids","name","first","last","admin","getTimezone","original","cloneDeep","editMode","user","getUsers","_this","getDavisUsers","then","response","remove","forEach","index","error","config","success","catch","err","includes","logOut","updateFilter","input","value","ngOnInit","__decorate","Component","moduleId","module","id","selector","templateUrl","DavisService","Router","exports"],"mappings":"sgBAAAA,OAAAC,QAAA,iBAEAC,SAAAD,QAAA,mBACAE,gBAAAF,QAAA,uBACAG,EAAAH,QAAA,UAOaI,qBAAoB,WAa7B,QAAAA,GAAmBC,EAA6BC,GAA7BC,KAAAF,OAAAA,EAA6BE,KAAAD,OAAAA,EAXhDC,KAAAC,WAAqB,EACrBD,KAAAE,aAAuB,OACvBF,KAAAG,mBAA6B,EAC7BH,KAAAI,kBAA4B,EAC5BJ,KAAAK,SAAmB,EACnBL,KAAAM,UAAoB,EACpBN,KAAAO,SACAP,KAAAQ,QAAkB,uBAClBR,KAAAS,aAAuB,6BACvBT,KAAAU,WAAqB,GAiEzB,MA7DIb,GAAAc,UAAAC,QAAA,WACEZ,KAAKF,OAAOe,OAAOC,WACjBC,MAAO,KACPC,SAAU,KACVC,SAAU,KACVC,UAAW,KACXC,MACIC,MAAO,KACPC,KAAM,MAEVC,OAAO,GAETtB,KAAKF,OAAOe,OAAOC,UAAUG,SAAWjB,KAAKF,OAAOyB,cACpDvB,KAAKF,OAAOe,OAAOW,SAASV,UAAYlB,EAAE6B,UAAUzB,KAAKF,OAAOe,OAAOC,WACvEd,KAAKU,WAAa,IAGpBb,EAAAc,UAAAe,SAAA,SAASC,GACP3B,KAAKM,UAAW,EAChBN,KAAKF,OAAOe,OAAOW,SAASV,UAAYa,EACxC3B,KAAKF,OAAOe,OAAOC,UAAYlB,EAAE6B,UAAUE,GAC3C3B,KAAKU,WAAa,IAGpBb,EAAAc,UAAAiB,SAAA,WAAA,GAAAC,GAAA7B,IACEA,MAAKF,OAAOgC,gBACTC,KACC,SAAAC,GACEH,EAAK/B,OAAOe,OAAON,MAAQyB,EAASzB,MACpCX,EAAEqC,OAAOJ,EAAK/B,OAAOe,OAAON,MAAO,SAACoB,GAClC,MAAOA,GAAKZ,QAAUc,EAAK/B,OAAOe,OAAOc,KAAKZ,QAEhDc,EAAK/B,OAAOe,OAAON,MAAM2B,QAAS,SAACP,EAAWQ,GACvCR,EAAKR,MAGHQ,EAAKR,KAAKC,QAAOS,EAAK/B,OAAOe,OAAON,MAAM4B,GAAOhB,KAAKC,MAAQ,IAC9DO,EAAKR,KAAKE,OAAMQ,EAAK/B,OAAOe,OAAON,MAAM4B,GAAOhB,KAAKE,KAAO,KAHjEQ,EAAK/B,OAAOe,OAAON,MAAM4B,GAAOhB,MAAQC,MAAM,GAAGC,KAAK,MAM1DQ,EAAKtB,MAAQX,EAAE6B,UAAUO,EAASzB,QAEpC,SAAA6B,GACEP,EAAK/B,OAAOuC,OAAc,MAAEC,SAAU,EACtCT,EAAK/B,OAAOuC,OAAc,MAAED,MAAQ,iDAErCG,MAAM,SAAAC,GACDA,EAAIC,SAAS,kBACfZ,EAAK/B,OAAO4C,YAKtB7C,EAAAc,UAAAgC,aAAA,SAAaC,GACX5C,KAAKU,WAAakC,EAAMC,OAG1BhD,EAAAc,UAAAmC,SAAA,WACE9C,KAAK4B,YAGX/B,IA5EaA,sBAAoBkD,YALhCvD,OAAAwD,WACGC,SAAUC,OAAOC,GACjBC,SAAU,eACVC,YAAa,kEAec1D,gBAAA2D,aAA6B5D,SAAA6D,UAb/C1D,sBAAA2D,QAAA3D,qBAAAA","file":"../../../../../app/shared/config/config-users/config-users.component.js","sourcesContent":["import { Component, OnInit, Pipe, PipeTransform } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DavisService } from '../../davis.service';\nimport * as _ from \"lodash\";\n\n@Component({\n    moduleId: module.id,\n    selector: 'config-users',\n    templateUrl: './config-users.component.html',\n})\nexport class ConfigUsersComponent implements OnInit {\n    \n    submitted: boolean = false;\n    submitButton: string = 'Save';\n    isPasswordFocused: boolean = false;\n    isPasswordMasked: boolean = true;\n    addUser: boolean = true;\n    editUser: boolean = false;\n    users: any = [];\n    backImg: string = '/assets/img/back.svg';\n    backImgHover: string = '/assets/img/back-hover.svg';\n    filterName: string = '';\n    \n    constructor(public iDavis: DavisService, public router: Router) {}\n    \n    addMode() {\n      this.iDavis.values.otherUser = {\n        email: null,\n        password: null,\n        timezone: null,\n        alexa_ids: null,\n        name: {\n            first: null,\n            last: null\n        },\n        admin: false\n      };\n      this.iDavis.values.otherUser.timezone = this.iDavis.getTimezone();\n      this.iDavis.values.original.otherUser = _.cloneDeep(this.iDavis.values.otherUser);\n      this.filterName = '';\n    }\n    \n    editMode(user: any) {\n      this.editUser = true;\n      this.iDavis.values.original.otherUser = user;\n      this.iDavis.values.otherUser = _.cloneDeep(user);\n      this.filterName = '';\n    }\n    \n    getUsers() {\n      this.iDavis.getDavisUsers()\n        .then( \n          response => {\n            this.iDavis.values.users = response.users;\n            _.remove(this.iDavis.values.users, (user: any) => {\n              return user.email === this.iDavis.values.user.email;\n            });\n            this.iDavis.values.users.forEach( (user: any, index: number) => {\n              if (!user.name) {\n                this.iDavis.values.users[index].name = {first:'',last:''};\n              } else {\n                if (!user.name.first) this.iDavis.values.users[index].name.first = '';\n                if (!user.name.last) this.iDavis.values.users[index].name.last = '';\n              }\n            });\n            this.users = _.cloneDeep(response.users);\n          },\n          error => {\n            this.iDavis.config['users'].success = false;\n            this.iDavis.config['users'].error = 'Unable to get users, please try again later.';\n          })\n          .catch(err => {\n            if (err.includes('invalid token')) {\n              this.iDavis.logOut();\n            }\n          });\n    }\n    \n    updateFilter(input: any) {\n      this.filterName = input.value;\n    }\n    \n    ngOnInit() {\n      this.getUsers();\n    }\n\n}"]}