{"version":3,"sources":["app/shared/config/config-slack/config-slack.component.ts"],"names":["core_1","require","router_1","davis_service_1","_","ConfigSlackComponent","iDavis","router","this","myURL","requestUri","submitted","submitButton","isPasswordFocused","isPasswordMasked","isDirty","window","location","host","values","slack","redirectUri","prototype","validate","clientId","clientSecret","config","success","isWizard","isEqual","original","doSubmit","_this","connectSlack","then","result","startSlack","sessionStorage","setItem","error","message","console","log","windowLocation","ngOnInit","setTimeout","document","getElementsByName","focus","Clipboard","__decorate","Component","moduleId","module","id","selector","templateUrl","DavisService","Router","exports"],"mappings":"sgBAAAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,mBAGAE,gBAAAF,QAAA,uBACAG,EAAAH,QAAA,UAOaI,qBAAoB,WAU7B,QAAAA,GAAmBC,EAA6BC,GAA7BC,KAAAF,OAAAA,EAA6BE,KAAAD,OAAAA,EARhDC,KAAAC,MAAgB,GAChBD,KAAAE,WAAqB,GACrBF,KAAAG,WAAqB,EACrBH,KAAAI,aAAwBJ,KAAKF,OAAe,SAAI,kBAAoB,yBACpEE,KAAAK,mBAA6B,EAC7BL,KAAAM,kBAA4B,EAC5BN,KAAAO,SAAmB,EAGfP,KAAKC,MAAQ,WAAaO,OAAOC,SAASC,KAC1CV,KAAKE,WAAgBF,KAAKC,MAAK,iBAC/BD,KAAKF,OAAOa,OAAOC,MAAMC,YAAiBb,KAAKC,MAAK,SAuD5D,MApDIJ,GAAAiB,UAAAC,SAAA,WACMf,KAAKF,OAAOa,OAAOC,MAAMI,UAAYhB,KAAKF,OAAOa,OAAOC,MAAMK,aAC9DjB,KAAKI,aAAe,0BACZJ,KAAKF,OAAOoB,OAAc,MAAEC,SAAWnB,KAAKF,OAAOsB,WAC3DpB,KAAKI,aAAe,mBAExBJ,KAAKO,SAAWX,EAAEyB,QAAQrB,KAAKF,OAAOa,OAAOC,MAAOZ,KAAKF,OAAOa,OAAOW,SAASV,QAGlFf,EAAAiB,UAAAS,SAAA,WAAA,GAAAC,GAAAxB,IACEA,MAAKG,WAAY,GACZH,KAAKF,OAAOoB,OAAc,MAAEC,SAAWnB,KAAKF,OAAOa,OAAOC,MAAMI,UAAYhB,KAAKF,OAAOa,OAAOC,MAAMK,cACxGjB,KAAKI,aAAe,YACpBJ,KAAKF,OAAO2B,eACTC,KAAK,SAAAC,GACAA,EAAOR,QACTK,EAAK1B,OAAO8B,aACTF,KACC,SAAAC,GACMA,EAAOR,SACTU,eAAeC,QAAQ,kBAAmB,QAC1CN,EAAK1B,OAAOoB,OAAc,MAAEC,SAAU,IAEtCK,EAAK1B,OAAOoB,OAAc,MAAEC,SAAU,EACtCK,EAAK1B,OAAOoB,OAAc,MAAEa,MAAQJ,EAAOK,UAG/C,SAAAD,GACIE,QAAQC,IAAIH,GACZP,EAAK1B,OAAOoB,OAAc,MAAEC,SAAU,KAG9CK,EAAK1B,OAAOoB,OAAc,MAAEC,SAAU,EACtCK,EAAK1B,OAAOoB,OAAc,MAAEa,MAAQJ,EAAOK,UAG/C,SAAAD,GACEE,QAAQC,IAAIH,GACZP,EAAK1B,OAAOoB,OAAc,MAAEC,SAAU,KAEjCnB,KAAKF,OAAOsB,WACrBS,eAAeC,QAAQ,kBAAmB,QAC1C9B,KAAKF,OAAOqC,eAAenC,KAAKC,SAIpCJ,EAAAiB,UAAAsB,SAAA,WACEC,WAAW,WACTC,SAASC,kBAAkB,YAAY,GAAGC,QAC1C,GAAIC,WAAU,eACb,MAET5C,IApEaA,sBAAoB6C,YALhClD,OAAAmD,WACGC,SAAUC,OAAOC,GACjBC,SAAU,eACVC,YAAa,kEAYcrD,gBAAAsD,aAA6BvD,SAAAwD,UAV/CrD,sBAAAsD,QAAAtD,qBAAAA","file":"../../../../../app/shared/config/config-slack/config-slack.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router }    from '@angular/router';\n\n// Services\nimport { DavisService } from '../../davis.service';\nimport * as _ from \"lodash\";\n\n@Component({\n    moduleId: module.id,\n    selector: 'config-slack',\n    templateUrl: './config-slack.component.html',\n})\nexport class ConfigSlackComponent implements OnInit {\n\n    myURL: string = '';\n    requestUri: string = '';\n    submitted: boolean = false;\n    submitButton: string = (this.iDavis.isWizard) ? 'Skip and Finish' : 'Create Davis Slack Bot';\n    isPasswordFocused: boolean = false;\n    isPasswordMasked: boolean = true;\n    isDirty: boolean = false;\n    \n    constructor(public iDavis: DavisService, public router: Router) {\n        this.myURL = 'https://' + window.location.host;\n        this.requestUri = `${this.myURL}/slack/receive`;\n        this.iDavis.values.slack.redirectUri = `${this.myURL}/oauth`;\n    }\n  \n    validate() {\n      if (this.iDavis.values.slack.clientId && this.iDavis.values.slack.clientSecret) {\n          this.submitButton = 'Create Davis Slack Bot';\n      } else if (!this.iDavis.config['slack'].success && this.iDavis.isWizard){\n          this.submitButton = 'Skip and Finish';\n      }\n      this.isDirty = !_.isEqual(this.iDavis.values.slack, this.iDavis.values.original.slack);\n    }\n    \n    doSubmit() {\n      this.submitted = true;\n      if (!this.iDavis.config['slack'].success && this.iDavis.values.slack.clientId && this.iDavis.values.slack.clientSecret) {\n        this.submitButton = 'Saving...';\n        this.iDavis.connectSlack()\n          .then(result => {\n            if (result.success) {\n              this.iDavis.startSlack()\n                .then(\n                  result => {\n                    if (result.success) {\n                      sessionStorage.setItem('wizard-finished', 'true');\n                      this.iDavis.config['slack'].success = true;\n                    } else {\n                      this.iDavis.config['slack'].success = false;\n                      this.iDavis.config['slack'].error = result.message;\n                    }\n                  },\n                  error => {\n                      console.log(error);\n                      this.iDavis.config['slack'].success = false;\n                  });\n            } else {\n              this.iDavis.config['slack'].success = false;\n              this.iDavis.config['slack'].error = result.message;\n            }\n          },\n          error => {\n            console.log(error);\n            this.iDavis.config['slack'].success = false;\n          });\n      } else if (this.iDavis.isWizard) {\n        sessionStorage.setItem('wizard-finished', 'true');\n        this.iDavis.windowLocation(this.myURL);\n      }\n    }\n    \n    ngOnInit() {\n      setTimeout(() => {\n        document.getElementsByName('clientId')[0].focus();\n        new Clipboard('.clipboard');\n      }, 200);\n    }\n}\n"]}