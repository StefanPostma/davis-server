{"version":3,"sources":["app/shared/config/config-slack/config-slack.component.ts"],"names":["core_1","require","davis_service_1","_","ConfigSlackComponent","iDavis","this","myURL","requestUri","submitted","submitButton","isPasswordFocused","isPasswordMasked","isDirty","window","location","host","values","slack","redirectUri","prototype","validate","clientId","clientSecret","config","success","isWizard","isEqual","original","doSubmit","_this","connectSlack","then","result","startSlack","sessionStorage","setItem","error","message","console","log","windowLocation","ngOnInit","setTimeout","document","getElementsByName","focus","Clipboard","__decorate","Component","moduleId","module","id","selector","templateUrl","DavisService","exports"],"mappings":"sgBAAAA,OAAAC,QAAA,iBAGAC,gBAAAD,QAAA,uBACAE,EAAAF,QAAA,UAOaG,qBAAoB,WAU7B,QAAAA,GAAmBC,GAAAC,KAAAD,OAAAA,EARnBC,KAAAC,MAAgB,GAChBD,KAAAE,WAAqB,GACrBF,KAAAG,WAAqB,EACrBH,KAAAI,aAAwBJ,KAAKD,OAAe,SAAI,kBAAoB,yBACpEC,KAAAK,mBAA6B,EAC7BL,KAAAM,kBAA4B,EAC5BN,KAAAO,SAAmB,EAGfP,KAAKC,MAAQ,WAAaO,OAAOC,SAASC,KAC1CV,KAAKE,WAAgBF,KAAKC,MAAK,iBAC/BD,KAAKD,OAAOY,OAAOC,MAAMC,YAAiBb,KAAKC,MAAK,SAsD5D,MAnDIH,GAAAgB,UAAAC,SAAA,WACMf,KAAKD,OAAOY,OAAOC,MAAMI,UAAYhB,KAAKD,OAAOY,OAAOC,MAAMK,aAC9DjB,KAAKI,aAAe,0BACZJ,KAAKD,OAAOmB,OAAc,MAAEC,SAAWnB,KAAKD,OAAOqB,WAC3DpB,KAAKI,aAAe,mBAExBJ,KAAKO,SAAWV,EAAEwB,QAAQrB,KAAKD,OAAOY,OAAOC,MAAOZ,KAAKD,OAAOY,OAAOW,SAASV,QAGlFd,EAAAgB,UAAAS,SAAA,WAAA,GAAAC,GAAAxB,MACOA,KAAKD,OAAOmB,OAAc,MAAEC,SAAWnB,KAAKD,OAAOY,OAAOC,MAAMI,UAAYhB,KAAKD,OAAOY,OAAOC,MAAMK,cACxGjB,KAAKI,aAAe,YACpBJ,KAAKD,OAAO0B,eACTC,KAAK,SAAAC,GACAA,EAAOR,QACTK,EAAKzB,OAAO6B,aACTF,KAAK,SAAAC,GACAA,EAAOR,SACLU,eAAeC,QAAQ,kBAAmB,QAC1CN,EAAKzB,OAAOmB,OAAc,MAAEC,SAAU,IAEtCK,EAAKzB,OAAOmB,OAAc,MAAEC,SAAU,EACtCK,EAAKzB,OAAOmB,OAAc,MAAEa,MAAQJ,EAAOK,UAG/C,SAAAD,GACIE,QAAQC,IAAIH,GACZP,EAAKzB,OAAOmB,OAAc,MAAEC,SAAU,KAG1CK,EAAKzB,OAAOmB,OAAc,MAAEC,SAAU,EACtCK,EAAKzB,OAAOmB,OAAc,MAAEa,MAAQJ,EAAOK,UAGrD,SAAAD,GACEE,QAAQC,IAAIH,GACZP,EAAKzB,OAAOmB,OAAc,MAAEC,SAAU,IAE1CnB,KAAKG,WAAY,IAEjB0B,eAAeC,QAAQ,kBAAmB,QAC1C9B,KAAKD,OAAOoC,eAAenC,KAAKC,SAIpCH,EAAAgB,UAAAsB,SAAA,WACEC,WAAW,WACTC,SAASC,kBAAkB,YAAY,GAAGC,QAC1C,GAAIC,WAAU,eACb,MAET3C,IAnEaA,sBAAoB4C,YALhChD,OAAAiD,WACGC,SAAUC,OAAOC,GACjBC,SAAU,eACVC,YAAa,kEAYcpD,gBAAAqD,gBAVlBnD,sBAAAoD,QAAApD,qBAAAA","file":"../../../../../app/shared/config/config-slack/config-slack.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n// Services\nimport { DavisService } from '../../davis.service';\nimport * as _ from \"lodash\";\n\n@Component({\n    moduleId: module.id,\n    selector: 'config-slack',\n    templateUrl: './config-slack.component.html',\n})\nexport class ConfigSlackComponent implements OnInit {\n\n    myURL: string = '';\n    requestUri: string = '';\n    submitted: boolean = false;\n    submitButton: string = (this.iDavis.isWizard) ? 'Skip and Finish' : 'Create Davis Slack Bot';\n    isPasswordFocused: boolean = false;\n    isPasswordMasked: boolean = true;\n    isDirty: boolean = false;\n    \n    constructor(public iDavis: DavisService) {\n        this.myURL = 'https://' + window.location.host;\n        this.requestUri = `${this.myURL}/slack/receive`;\n        this.iDavis.values.slack.redirectUri = `${this.myURL}/oauth`;\n    }\n  \n    validate() {\n      if (this.iDavis.values.slack.clientId && this.iDavis.values.slack.clientSecret) {\n          this.submitButton = 'Create Davis Slack Bot';\n      } else if (!this.iDavis.config['slack'].success && this.iDavis.isWizard){\n          this.submitButton = 'Skip and Finish';\n      }\n      this.isDirty = !_.isEqual(this.iDavis.values.slack, this.iDavis.values.original.slack);\n    }\n    \n    doSubmit() {\n      if (!this.iDavis.config['slack'].success && this.iDavis.values.slack.clientId && this.iDavis.values.slack.clientSecret) {\n        this.submitButton = 'Saving...';\n        this.iDavis.connectSlack()\n          .then(result => {\n            if (result.success) {\n              this.iDavis.startSlack()\n                .then(result => {\n                  if (result.success) {\n                        sessionStorage.setItem('wizard-finished', 'true');\n                        this.iDavis.config['slack'].success = true;\n                      } else {\n                        this.iDavis.config['slack'].success = false;\n                        this.iDavis.config['slack'].error = result.message;\n                      }\n                    },\n                    error => {\n                        console.log(error);\n                        this.iDavis.config['slack'].success = false;\n                    });\n                  } else {\n                    this.iDavis.config['slack'].success = false;\n                    this.iDavis.config['slack'].error = result.message;\n                  }\n          },\n          error => {\n            console.log(error);\n            this.iDavis.config['slack'].success = false;\n          });\n        this.submitted = true;\n      } else {\n        sessionStorage.setItem('wizard-finished', 'true');\n        this.iDavis.windowLocation(this.myURL);\n      }\n    }\n    \n    ngOnInit() {\n      setTimeout(() => {\n        document.getElementsByName('clientId')[0].focus();\n        new Clipboard('.clipboard');\n      }, 200);\n    }\n}\n"]}