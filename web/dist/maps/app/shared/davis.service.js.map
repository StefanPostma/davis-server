{"version":3,"sources":["app/shared/davis.service.ts"],"names":["core_1","require","router_1","http_1","http_2","DavisService","http","router","this","isAdmin","isAuthenticated","timezones","isWizard","titleGlobal","helpLinkText","isChromeExtensionInstalled","chrome","app","isInstalled","values","authenticate","email","password","user","timezone","alexa_ids","name","first","last","admin","otherUser","users","dynatrace","url","token","strictSSL","slack","enabled","clientId","clientSecret","redirectUri","original","config","title","path","error","success","alexa","prototype","logOut","sessionStorage","removeItem","navigate","getJwtToken","headers","Headers","Content-Type","options","RequestOptions","post","toPromise","then","extractData","catch","handleError","getTimezones","x-access-token","get","getDavisUser","getDavisUsers","updateDavisUser","put","addDavisUser","removeDavisUser","delete","getDynatrace","connectDynatrace","validateDynatrace","connectAlexa","getSlack","connectSlack","startSlack","res","body","json","errMsg","Response","err","JSON","stringify","status","statusText","message","toString","console","Promise","reject","windowLocation","window","location","assign","windowOpen","open","addToChrome","webstore","install","addToChomeSuccess","addToChomeFailure","clickElem","id","document","getElementById","click","getTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","__decorate","Injectable","Http","Router","exports"],"mappings":"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","file":"../../../app/shared/davis.service.js","sourcesContent":["import {Injectable}                from '@angular/core';\nimport { Router }                  from '@angular/router';\nimport { Http, Response }          from '@angular/http';\nimport { Headers, RequestOptions } from '@angular/http';\n\ndeclare var chrome: any;\n\n@Injectable()\nexport class DavisService {\n\n  isAdmin: boolean = false;\n  isAuthenticated: boolean = false;\n\n  token: string;\n  timezones: any = [];\n  isWizard: boolean = false;\n  titleGlobal: string = '';\n  helpLinkText: string = 'How to complete this step';\n  isChromeExtensionInstalled: boolean = chrome.app.isInstalled;\n\n  values: any = {\n    authenticate: {\n      email: null,\n      password: null\n    },\n    user: {\n      email: null,\n      password: null,\n      timezone: null,\n      alexa_ids: null,\n      name: {\n          first: null,\n          last: null\n      },\n      admin: false\n    },\n    otherUser: {\n      email: null,\n      password: null,\n      timezone: null,\n      alexa_ids: null,\n      name: {\n          first: null,\n          last: null\n      },\n      admin: false\n    },\n    users: [],\n    dynatrace: {\n      url: null,\n      token: null,\n      strictSSL: true\n    },\n    slack: {\n      enabled: true,\n      clientId: null,\n      clientSecret: null,\n      redirectUri: null\n    },\n    original: {\n      user: {},\n      otherUser: {},\n      dynatrace: {},\n      slack: {}\n    }\n  };\n\n  config: any = {\n    user: {\n      title: 'My Account',\n      name: 'user',\n      path: 'src/config-user',\n      error: null,\n      success: null\n    },\n    users: {\n      title: 'User Accounts',\n      name: 'users',\n      path: 'src/config-users',\n      error: null,\n      success: null\n    },\n    dynatrace: {\n      title: 'Let\\'s connect to Dynatrace!',\n      name: 'dynatrace',\n      path: 'src/config-dynatrace',\n      error: null,\n      success: null\n    },\n    alexa: {\n      title: 'Alexa',\n      name: 'alexa',\n      path: 'src/config-alexa',\n      error: null,\n      success: null\n    },\n    slack: {\n      title: 'Slack App',\n      name: 'slack',\n      path: 'src/config-slack',\n      error: null,\n      success: null\n    }\n  };\n\n  constructor (private http: Http, private router: Router) {}\n  \n  logOut(): void {\n    this.isAuthenticated = false;\n    this.isAdmin = false;\n    this.token = null;\n    sessionStorage.removeItem('email');\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('isAdmin');\n    this.router.navigate([\"/auth/login\"]);\n  }\n\n  getJwtToken(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.post('/api/v1/authenticate', { email: this.values.authenticate.email, password: this.values.authenticate.password }, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getTimezones(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.get('/api/v1/system/users/timezones', options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n  \n  getDavisUser(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.get(`/api/v1/system/users/${this.values.authenticate.email}`, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n  \n  getDavisUsers(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.get(`/api/v1/system/users`, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n  \n  updateDavisUser(user: any): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.put(`/api/v1/system/users/${user.email}`, user, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  addDavisUser(user: any): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.post(`/api/v1/system/users/${user.email}`, user, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  removeDavisUser(email: string): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.delete(`/api/v1/system/users/${email}`, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getDynatrace(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token } );\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.get('/api/v1/system/config/dynatrace', options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n  \n  connectDynatrace(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token } );\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.put('/api/v1/system/config/dynatrace', this.values.dynatrace, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  validateDynatrace(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token } );\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.get('/api/v1/system/config/dynatrace/validate', options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  connectAlexa(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.put(`/api/v1/system/users/${this.values.user.email}`, { alexa_ids: this.values.user.alexa_ids }, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n  \n  getSlack(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.get('/api/v1/system/config/slack', options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  connectSlack(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.put('/api/v1/system/config/slack', this.values.slack, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n  \n  startSlack(): Promise<any> {\n    let headers = new Headers({ 'Content-Type': 'application/json', 'x-access-token': this.token });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.post('/api/v1/system/config/slack/start', {}, options)\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  private handleError(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.error(errMsg);\n    return Promise.reject(errMsg);\n  }\n\n  windowLocation(url:string): void {\n    window.location.assign(url);\n  }\n\n  windowOpen(url:string): void {\n    window.open(url);\n  }\n  \n  addToChrome(): void {\n    chrome.webstore.install('https://chrome.google.com/webstore/detail/kighaljfkdkpbneahajiknoiinbckfpg', this.addToChomeSuccess, this.addToChomeFailure);\n  }\n  \n  addToChomeSuccess(): void {}\n  \n  addToChomeFailure(err: string): void {\n    window.open('https://chrome.google.com/webstore/detail/kighaljfkdkpbneahajiknoiinbckfpg');\n  }\n  \n  clickElem(id: string): void {\n    document.getElementById(id).click();\n  }\n\n  getTimezone(): string {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n}"]}