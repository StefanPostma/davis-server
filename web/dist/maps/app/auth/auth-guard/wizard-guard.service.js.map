{"version":3,"sources":["app/auth/auth-guard/wizard-guard.service.ts"],"names":["core_1","require","router_1","davis_service_1","WizardGuard","iDavis","router","this","prototype","canActivate","route","state","isWizard","token","CheckUser","_this","values","authenticate","email","password","getJwtToken","then","response","CheckUserResponse","error","CheckUserError","success","user","admin","sessionStorage","getItem","isAuthenticated","isAdmin","navigate","__decorate","Injectable","DavisService","Router","exports"],"mappings":"sgBAUAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,mBAIAE,gBAAAF,QAAA,8BAMaG,YAAW,WAItB,QAAAA,GACSC,EACAC,GADAC,KAAAF,OAAAA,EACAE,KAAAD,OAAAA,EA2DX,MAtDEF,GAAAI,UAAAC,YAAA,SAAYC,EAA+BC,GACzC,SAAKJ,KAAKF,OAAOO,WAAaL,KAAKF,OAAOQ,QACjCN,KAAKO,aAShBV,EAAAI,UAAAM,UAAA,WAAA,GAAAC,GAAAR,IAME,OAJAA,MAAKF,OAAOW,OAAOC,aAAaC,MAAQ,kBACxCX,KAAKF,OAAOW,OAAOC,aAAaE,SAAW,WAGpCZ,KAAKF,OAAOe,cAChBC,KAAK,SAACC,GAAkB,MAAAP,GAAKQ,kBAAkBD,IAC1C,SAACE,GAAe,MAAAT,GAAKU,eAAeD,MAM9CpB,EAAAI,UAAAe,kBAAA,SAAkBD,GAChB,MAAIA,GAASI,SACXnB,KAAKF,OAAOO,UAAW,EACvBL,KAAKF,OAAOQ,MAAQS,EAAST,MAC7BN,KAAKF,OAAOW,OAAOW,KAAKC,OAAQ,GACzB,GACEC,eAAeC,QAAQ,UAChCvB,KAAKF,OAAOO,UAAW,EACvBL,KAAKF,OAAOQ,MAAQgB,eAAeC,QAAQ,SAC3CvB,KAAKF,OAAO0B,iBAAkB,EAC9BxB,KAAKF,OAAO2B,QAAgD,SAAtCH,eAAeC,QAAQ,WAC7CvB,KAAKF,OAAOW,OAAOC,aAAaC,MAAQW,eAAeC,QAAQ,SAC/DvB,KAAKD,OAAO2B,UAAU,oBACf,IAEP1B,KAAKF,OAAOO,UAAW,EACvBL,KAAKD,OAAO2B,UAAU,iBACf,IAOX7B,EAAAI,UAAAiB,eAAA,SAAeD,GAGb,MAFAjB,MAAKF,OAAOO,UAAW,EACvBL,KAAKD,OAAO2B,UAAU,iBACf,GAEX7B,IAjEaA,aAAW8B,YADvBlC,OAAAmC,6CAMkBhC,gBAAAiC,aACAlC,SAAAmC,UANNjC,aAAAkC,QAAAlC,YAAAA","file":"../../../../app/auth/auth-guard/wizard-guard.service.js","sourcesContent":["// ============================================================================\n// Wizard Guard - SERVICE\n//\n// This service checks to see if the default user exists before completing route\n// ============================================================================\n\n// ----------------------------------------------------------------------------\n// Imports\n// ----------------------------------------------------------------------------\n// Angular\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate,\n         ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n// Services\nimport { DavisService } from '../../shared/davis.service';\n\n// ----------------------------------------------------------------------------\n// Class\n// ----------------------------------------------------------------------------\n@Injectable()\nexport class WizardGuard implements CanActivate {\n  // ------------------------------------------------------\n  // Inject services\n  // ------------------------------------------------------\n  constructor(\n    public iDavis: DavisService,\n    public router: Router) { }\n\n  // ------------------------------------------------------\n  // Check if default user is created before routing\n  // ------------------------------------------------------\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\n    if (!this.iDavis.isWizard && !this.iDavis.token) {\n      return this.CheckUser();\n    } else {\n      return true;\n    }\n  }\n\n  // ------------------------------------------------------\n  // Check if defult user exists\n  // ------------------------------------------------------\n  CheckUser(): Promise<any> {\n    // Set default user attributes\n    this.iDavis.values.authenticate.email = 'admin@localhost';\n    this.iDavis.values.authenticate.password = 'changeme';\n\n    // Attempt to get token\n    return this.iDavis.getJwtToken()\n      .then((response: any) => this.CheckUserResponse(response),\n            (error: any) => this.CheckUserError(error));\n  }\n\n  // ------------------------------------------------------\n  // Handle check user response\n  // ------------------------------------------------------\n  CheckUserResponse(response: any) {\n    if (response.success) {\n      this.iDavis.isWizard = true;\n      this.iDavis.token = response.token;\n      this.iDavis.values.user.admin = true;\n      return true;\n    } else if (sessionStorage.getItem('token')) {\n      this.iDavis.isWizard = false;\n      this.iDavis.token = sessionStorage.getItem('token');\n      this.iDavis.isAuthenticated = true;\n      this.iDavis.isAdmin = sessionStorage.getItem('isAdmin') === 'true';\n      this.iDavis.values.authenticate.email = sessionStorage.getItem('email');\n      this.router.navigate(['/configuration']);\n      return true;\n    } else {\n      this.iDavis.isWizard = false;\n      this.router.navigate(['/auth/login']);\n      return false;\n    }\n  }\n\n  // ------------------------------------------------------\n  // Handle check user error\n  // ------------------------------------------------------\n  CheckUserError(error: any) {\n    this.iDavis.isWizard = false;\n    this.router.navigate(['/auth/login']);\n    return false;\n  }\n}\n"]}