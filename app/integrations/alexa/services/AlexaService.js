'use strict';

const ConversationService = require('../../../services/ConversationService'),
    AccountService = require('../../../services/AccountService'),
    logger = require('../../../utils/logger'),
    Davis = require('../../../core'),
    BbPromise = require('bluebird'),
    _ = require('lodash');

const RESPONSE_VERSION = '1.0',
    REQUEST_SOURCE = 'alexa',
    LAUNCH_PHRASE = 'Start davis',
    ERROR_RESPONSE = 'Wow, this is embarrassing!  I understood what you were asking for but I simply can\'t but it into words.  Perhaps you could help me out by checking the logs and adding the missing template?',
    UNAUTHORIZED_RESPONSE = 'Unfortunately, you`re not authorized to use Davis yet.  No worries though, adding your user is simple.  For more information, check out the docs on GitHub!';


module.exports = function AlexaService(config) {

    /**
     * Validates a user based on request information
     * @param {Object} req - The request from Alexa.
     * @returns {Object} [user=null] - The user making the request.
     */
    function getUser(req) {
        logger.info('Attempting to get a user');
        return AccountService(config.users).getUser(_.get(req, 'session.user.userId', null), REQUEST_SOURCE);
    }

    /**
     * Grabs the text representation of what the user said
     * @param {Object} req - The request from Alexa.
     * @returns {string}
     */
    function getRequest(req) {
        logger.debug('Attempting to get request string');
        return _.get(req, 'request.intent.slots.command.value', null);
    }

    /**
     * The request type determined by Alexa
     * @param {Object} req - The request from Alexa.
     * @returns {string}
     */
    function getRequestType(req) {
        logger.info('Attempting to grab the request type');
        return _.get(req, 'request.type', null);
    }

    /**
     * Responds to Alexa using the exchange generated by Davis
     * @param {Object} davis - The fully proceeded Davis object.
     * @returns {Object} response - The response formatted how Alexa expects.
     */
    function formatResponse(davis) {
        //ToDo Add support for cards.
        logger.info('Generating the response for Alexa');

        let response;
        if (_.isString(davis.exchange.response.audible.ssml)) {
            response = davis.exchange.response.audible.ssml;
        } else if (_.isString(davis.exchange.response.visual.text)) {
            logger.debug('Defaulting back to base text because a response specifically intended for speech was not found');
            response = davis.exchange.response.visual.text;
        } else {
            response = ERROR_RESPONSE;
        }

        return alexaResponse(response, _.get(davis, 'exchange.response.finished'));
    }

    function alexaResponse(response, shouldEndSession) {
        logger.info(`Responding to Alexa with '${response}'.`);
        shouldEndSession = shouldEndSession || true;
        return {
            version: RESPONSE_VERSION,
            sessionAttributes: {},
            response: {
                shouldEndSession: shouldEndSession,
                outputSpeech: {
                    type: 'SSML',
                    ssml: `<speak>${response}</speak>`
                }
            }
        };
    }

    return {
        /**
         * Interacts with Davis via Alexa
         * @param {Object} req - The request received from Alexa.
         * @returns {promise} res - The response formatted for Alexa.
         */
        askDavis: (req) => {
            logger.info('Starting our interaction with Davis');
            // Grabs the request body if it exists otherwise we'll assume it's the body already.
            req = _.get(req, 'body', req);
            return new BbPromise((resolve, reject) => {
                let user = getUser(req),
                    request = null,
                    requestType = getRequestType(req);

                if (_.isNil(user)) return resolve(alexaResponse(UNAUTHORIZED_RESPONSE, true));

                // Setting the request based on the request type
                if (requestType === 'LaunchRequest') {
                    logger.debug('Processing a launch request');
                    request = LAUNCH_PHRASE;
                } else if (requestType === 'IntentRequest') {
                    logger.debug('Processing an intent request');
                    request = getRequest(req);
                } else if (requestType === 'SessionEndedRequest') {
                    logger.debug(`The session is ending because ${_.get(req, 'request.reason', 'an unknown reason')}.`);
                    return resolve();
                } else {
                    logger.error(`Received an unknown request type: ${requestType}`);
                    return reject('Invalid request type');
                }

                // Starts or continues our conversation
                ConversationService.getConversation(user)
                    .then(conversation => {
                        const davis = new Davis(user, conversation, config);
                        return davis.interact(request, REQUEST_SOURCE);
                    })
                    .then(davis => {
                        logger.info('Finished processing request');
                        return resolve(formatResponse(davis));
                    })
                    .catch(err => {
                        logger.error(`Unfortunately, something went wrong.  ${err.message}`);
                        return reject(alexaResponse(`Unfortunately, something went wrong.  ${err.message}`, true));
                    });
            });
        }
    };
};

