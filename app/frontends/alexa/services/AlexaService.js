'use strict';

const ConversationService = require('../../../services/ConversationService'),
    AccountService = require('../../../services/AccountService'),
    logger = require('../../../utils/logger'),
    Davis = require('../../../core'),
    BbPromise = require('bluebird'),
    _ = require('lodash');

const RESPONSE_VERSION = '1.0',
    REQUEST_SOURCE = 'alexa',
    LAUNCH_PHRASE = 'Start davis';


const AlexaService = {
    /**
     * Interacts with Davis via Alexa
     * @param {Object} req - The request received from Alexa.
     * @returns {promise} res - The response formatted for Alexa.
     */
    askDavis: (req) => {
        logger.info('Starting our interaction with Davis');
        // Grabs the request body if it exists otherwise we'll assume it's the body already.
        req = _.get(req, 'body', req);
        return new BbPromise((resolve, reject) => {
            let user = getUser(req),
                request = null,
                requestType = getRequestType(req);

            // Setting the request based on the request type
            if (requestType === 'LaunchRequest') {
                logger.debug('Processing a launch request');
                request = LAUNCH_PHRASE;
            } else if (requestType === 'IntentRequest') {
                logger.debug('Processing an intent request');
                request = getRequest(req);
            } else if (requestType === 'SessionEndedRequest') {
                logger.debug(`The session is ending because ${_.get(req, 'request.reason', 'an unknown reason')}.`);
                return resolve();
            } else {
                logger.error(`Received an unknown request type: ${requestType}`);
                return reject('Invalid request type');
            }

            // Starts or continues our conversation
            ConversationService.getConversation(user)
                .then(conversation => {
                    let davis = new Davis(user, conversation);
                    return davis.interact(request, REQUEST_SOURCE);
                })
                .then(davis => {
                    logger.info('Finished processing request');
                    return resolve(formatResponse(davis));
                })
                .catch(err => {
                    logger.error(`Unfortunately, something went wrong.  ${err.msg}`);
                    //ToDo Add failure response
                    return resolve();
                });
        });
    }
};

/**
 * Validates a user based on request information
 * @param {Object} req - The request from Alexa.
 * @returns {Object} [user=null] - The user making the request. 
 */
function getUser(req) {
    logger.info('Attempting to get a user');
    return AccountService.getUser(_.get(req, 'session.user.userId', null), REQUEST_SOURCE);
}

/**
 * Grabs the text representation of what the user said
 * @param {Object} req - The request from Alexa.
 * @returns {string}
 */
function getRequest(req) {
    logger.debug('Attempting to get request string');
    return _.get(req, 'request.intent.slots.command.value', null);
}

/**
 * The request type determined by Alexa
 * @param {Object} req - The request from Alexa.
 * @returns {string}
 */
function getRequestType(req) {
    logger.info('Attempting to grab the request type');
    return _.get(req, 'request.type', null);
}

/**
 * Responds to Alexa using the exchange generated by Davis
 * @param {Object} davis - The fully proceeded Davis object.
 * @returns {Object} response - The response formatted how Alexa expects.
 */
function formatResponse(davis) {
    //ToDo Add support for cards.
    logger.info('Generating the reponse for Alexa');

    return {
        version: RESPONSE_VERSION,
        sessionAttributes: {},
        response: {
            shouldEndSession: _.get(davis, 'exchange.response.finished', true),
            outputSpeech: {
                type: 'SSML',
                ssml: '<speak>This is a test response!</speak>'
            }
        }
    };
}

module.exports = AlexaService;